/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 ./public/dazzling donuts.gltf -ts 
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { MeshRefractionMaterial, useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useLoader } from "@react-three/fiber";
import { RGBELoader } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    Torus: THREE.Mesh;
    Torus001: THREE.Mesh;
    Plane: THREE.Mesh;
  };
  materials: {
    bread: THREE.MeshStandardMaterial;
    ["Material.001"]: THREE.MeshStandardMaterial;
    ["Material.003"]: THREE.MeshStandardMaterial;
  };
};

type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<JSX.IntrinsicElements["mesh"]>
>;

export function Model(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("/dazzling donuts.gltf") as GLTFResult;
  const texture = useLoader(
    RGBELoader,
    "https://dl.polyhaven.org/file/ph-assets/HDRIs/hdr/1k/aerodynamics_workshop_1k.hdr",
  );
  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Torus.geometry}
        position={[0, -0.001, 0]}
      >
        <meshStandardMaterial
          color={"#b17127"}
          transparent={true}
          opacity={0.5}
        />
      </mesh>
      {/* <mesh castShadow receiveShadow geometry={nodes.Torus001.geometry} material={materials['Material.001']} position={[0, 0.036, 0]} scale={[0.992, 1.11, 0.992]} /> */}
      {/* <mesh castShadow receiveShadow geometry={nodes.Plane.geometry} material={materials['Material.003']} position={[-0.049, -0.317, 0.024]} scale={[17.281, 5.091, 17.281]} /> */}
    </group>
  );
}

useGLTF.preload("/dazzling donuts.gltf");
